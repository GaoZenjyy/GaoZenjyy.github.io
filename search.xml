<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试题 -- 浏览器缓存策略</title>
      <link href="/2022/02/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
      <url>/2022/02/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近面试被问到浏览器缓存策略相关问题，重新梳理一下关于缓存的知识。</p><p>浏览器在本地对用户对最近请求过的文档进行存储，当用户再次访问同一页面时，浏览器就可以直接从本地磁盘加载文件。</p><p><strong>浏览器缓存的意义</strong>：</p><ul><li><ol><li> 避免了冗余的数据传输，节省流量；</li></ol></li><li><ol start="2"><li> 加快了用户访问网页的速度；</li></ol></li><li><ol start="3"><li> 减小了服务器的压力；<br>阅读本文，你将学到：</li></ol></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 浏览器缓存类型</span><br><span class="line"><span class="number">2.</span> 缓存优先级 </span><br><span class="line"><span class="number">3.</span> 强缓存、协商缓存区别 </span><br><span class="line"><span class="number">4.</span> 如何配置缓存策略 </span><br><span class="line"><span class="number">5.</span> 实例分析掘金网站缓存策略</span><br></pre></td></tr></table></figure><h3 id="一、浏览器缓存的类型"><a href="#一、浏览器缓存的类型" class="headerlink" title="一、浏览器缓存的类型"></a>一、浏览器缓存的类型</h3><p>Web 前端缓存大致可以分为：数据库缓存、服务器端缓存（代理服务器缓存、CDN 缓存）、浏览器缓存。</p><p>浏览器缓存也包含很多内容：HTTP 缓存、indexDB、cookie、localstorage 等等。这里我们只讨论 HTTP 缓存相关内容。</p><p>当浏览器中存在缓存数据后，可以根据是否需要向服务器发送请求，将缓存类型分为：<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p><h4 id="1-强制缓存"><a href="#1-强制缓存" class="headerlink" title="1. 强制缓存"></a>1. 强制缓存</h4><p>用户请求数据，如果命中了缓存且缓存没有失效，则不向服务端请求数据，而直接从本地资源获取。</p><p>用户请求数据，如果命中了缓存且缓存失效，会向服务器重新请求资源，数据喝资源返回后，再次根据缓存规则存入浏览器缓存。</p><p>那么浏览器是怎么判断缓存是否失效呢？</p><p>强制缓存的<code>response header</code>中有两个字段表明失效规则（<code>Expires</code>/ <code>Cache-Control</code>）;</p><ul><li><p>  1.1 <code>Expires</code>：<code>Expires</code>的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。不过<code>Expires</code> 是<code>HTTP 1.0</code>的东西，现在默认浏览器均默认使用<code>HTTP 1.1</code>，所以它的作用基本忽略。另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。 所以<code>HTTP 1.1</code> 的版本，使用<code>Cache-Control</code>替代。</p></li><li><p>  1.2 <code>Cache-Control</code>：<code>Cache-Control</code> 是最重要的规则。常见的取值有<code>private、public</code>、<code>no-cache</code>、<code>max-age</code>、<code>no-store</code>;</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> public: 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容; </span><br><span class="line"><span class="number">2.</span> private: 表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容，比如：对应用户的本地浏览器; </span><br><span class="line"><span class="number">3.</span> no-cache: 在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证); </span><br><span class="line"><span class="number">4.</span> no-store: 缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存;</span><br></pre></td></tr></table></figure><ul><li>1.3 <code>Expires</code> 和 <code>Cache-Control</code> 的关系：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相同点</span></span><br><span class="line"><span class="number">1.</span> 都是强制缓存；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同点 </span></span><br><span class="line"><span class="number">1.</span> Expires是http1<span class="number">.0</span>规定的，而Cache-Control是http1<span class="number">.1</span>规定的； </span><br><span class="line"><span class="number">2.</span> Expires的过期时间采用的是绝对时间，容易造成差错； 而Cache-Control的过期时间采用的时相对时间，在缓存上不会出现问题； </span><br><span class="line"><span class="number">3.</span> 两者可以同时存在于一次请求中，但是不会同时在一次请求中起作用。 在HTTP1<span class="number">.0</span>的环境下，Cache-Control不起作用，Expires起作用； 在HTTP1<span class="number">.1</span>的环境之下， Expires不起作用，而Cache-Control起作用。当前一般都是http1<span class="number">.1</span>的情况，所以Expires是作为一种向下兼容的形式而存在的； </span><br><span class="line"><span class="number">4.</span> Cache-Control的选择更多，功能更为强大，推荐使用。 Expires作为强缓存，功能单一，不推荐使用；</span><br></pre></td></tr></table></figure><h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2. 协商缓存"></a>2. 协商缓存</h4><p>用户请求数据，浏览器直接向服务器发送请求，协商对比服务器端和本地的资源，验证本地资源是否有效。</p><p>协商缓存一般是使用 <code>if-modified-since</code>/<code>Last-Modified</code> 和 <code>if-none-match</code>/<code>Etag</code> 由服务器来决定浏览器缓存的资源是否可以使用。</p><ul><li>  <strong>Last-Modified / If-Modified-Since</strong></li></ul><p><code>Last-Modified</code>：服务器响应请求时，告诉浏览器资源最后的修改时间。</p><p><code>If-Modified-Since</code>：浏览器再次请求资源时，浏览器通知服务器，上次请求时，返回的资源最后修改时间。</p><p>若最后修改时间小于等于<code>If-Modified-Since</code>，则<code>response header</code>返回<code>304</code>，告知浏览器继续使用所保存的<code>cache</code>。若大于<code>If-Modified-Since</code>，则说明资源被改动过，返回状态码<code>200</code>；</p><ul><li>  <strong>If-none-match / Etag</strong></li></ul><p><code>Etag</code>：服务器响应请求时，告诉浏览器当前资源在浏览器的唯一标识（生成规则由服务器确定）</p><p><code>If-None-Match</code>：再次请求服务器时，通过此字段通知服务器客户端缓存数据的唯一标识。服务器收到请求后发现有<code>If-None-Match</code> 则与被请求资源的唯一标识进行比对，不同，说明资源又被改动过，则响应整片资源内容，返回状态码<code>200</code>；相同，说明资源无新修改，则响应<code>HTTP 304</code>，告知浏览器继续使用所保存的<code>cache</code>。</p><p><strong>Etag 与 Last-Modified 对比：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 在精确度上，Etag优于Last-Modified。Last-Modified精确到s，如果1s内，资源多次改变，Etag是可以判断出来并返回最新的资源;</span><br><span class="line"><span class="number">2.</span> 在性能上，Last-Modified优于Etag，因为Last-Modified只需要记录时间，而Etag需要服务器重新生成hash值，所以性能上略差; </span><br><span class="line"><span class="number">3.</span> 在优先级上，Etag优于Last-Modified，Etag和Last-Modified可同时存在。本地缓存时间到期后，浏览器向服务端发送请求报文，其中Request Header中包含If-none-match和Last-Modified-Since（与服务端Etag和Last-Modified对比，Etag优先级高），用以验证本地缓存数据验证是否与服务端保持一致。在服务器端会优先判断Etag。如果相同，返回<span class="number">304</span>；如果不同，就继续比较Last-Modified，然后决定是否返回新的资源。若服务端验证本地缓存与服务端一致，返回<span class="number">304</span>，浏览器加载本地缓存；否则，服务器返回请求的资源，同时给出新的Etag以及Last-Modified时间;</span><br></pre></td></tr></table></figure><h4 id="3-强制缓存和协商缓存的区别"><a href="#3-强制缓存和协商缓存的区别" class="headerlink" title="3. 强制缓存和协商缓存的区别"></a>3. 强制缓存和协商缓存的区别</h4><p>强制缓存和协商缓存命中缓存资源后，都是从本地读取资源。如果强制缓存生效，则不需要再向服务器发出请求；而协商缓存，不管是否使用缓存，必须向服务器发送一个请求来协商。</p><p>两类缓存规则可以同时存在，强制缓存优先级高于协商缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行协商缓存规则。如果强制缓存规则不生效，则需要进行协商缓存判断。</p><h3 id="二、缓存请求流程"><a href="#二、缓存请求流程" class="headerlink" title="二、缓存请求流程"></a>二、缓存请求流程</h3><p>浏览器缓存流程：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc601fadb8be42258f06028d25a4a821~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="三、实例分析"><a href="#三、实例分析" class="headerlink" title="三、实例分析"></a>三、实例分析</h3><p>分析下掘金的部分文件的缓存策略：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/671c991855784021a561d10e482d6310~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>注释：</p><ul><li>  html: 缓存有效时间为0s，页面加载时，强制浏览器每次向源服务器进行协商缓存；</li><li>  css: 改动频率较低，允许使用本地缓存，且存在强制缓存时间（各个css文件不同，按需设置）；强制缓存失效再进行协商缓存；</li><li>  js: 允许使用本地缓存，且存在强制缓存时间（各个js文件不同，按需设置）；强制缓存失效再进行协商缓存；</li><li>  image: 不经常改变的图片，允许使用本地缓存，且存在强制缓存时间，强制缓存失效再进行协商缓存；</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般在页面中，css、js、image等不同类型文件的缓存策略大致相同。即<strong>同时存在强缓存和协商缓存策略</strong>。对于强缓存，给定本地缓存的有效时间<code>max-age</code>，一般根据不同文件类型的确定<code>max-age</code>大小；对于协商缓存，给定<code>Last-Modified</code>和<code>Etag</code>标识，服务器端验证客户端缓存的有效性。本章中给出了，官网各部件浏览器端缓存策略的简介。但是，部分文件会存在特殊的缓存设置。比如，页面中很多的<code>js</code>、<code>css</code>、<code>image</code>等会添加版本号，强制刷新缓存等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- Vue Vuex</title>
      <link href="/2021/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-Vuex/"/>
      <url>/2021/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-Vuex/</url>
      
        <content type="html"><![CDATA[<h2 id="题1、Vuex-是干什么用的？为什么要使用？"><a href="#题1、Vuex-是干什么用的？为什么要使用？" class="headerlink" title="题1、Vuex 是干什么用的？为什么要使用？"></a>题1、Vuex 是干什么用的？为什么要使用？</h2><p>答：Vuex <code>状态管理器</code> 。</p><p><code>集中管理</code> 组件的状态数据，可以组件之间状态数据的 <code>共享</code> 。</p><p>有些功能需要在多个组件之间传递数据，组件之间传递数据需要使用 <code>属性</code> 、 <code>事件</code> 等方法，</p><p>但如果组件之间关系复杂传递起来需要 <code>一层一层传</code> 非常麻烦 ，而把数据直接 <code>保存</code> 到 Vuex 中，就可以直接在 <code>多个组件</code> 中直接使用， <code>非常方便</code> ！。</p><p>总结：</p><p>1、简单层级的传递：父向子（ <code>属性</code> ）、子向父（ <code>事件</code> ）传值<br>2、项目复杂时， <code>层级多</code> 了： Vuex，比如：项目中登录之后的用户信息，会被所有其他组件使用，这种需要 <code>经常使用的数据</code> 应该放到 Vuex 中。</p><h2 id="题2、Vuex-中由几部分组成？分别是干什么用的？"><a href="#题2、Vuex-中由几部分组成？分别是干什么用的？" class="headerlink" title="题2、Vuex 中由几部分组成？分别是干什么用的？"></a>题2、Vuex 中由几部分组成？分别是干什么用的？</h2><p>答：四部分组件：<br>1、 <code>state</code> ：定义数据<br>2、 <code>mutations</code> ：定义操作数据的方法，简单的操作，不能是异步的<br>3、 <code>actions</code> ：定义操作数据的复杂的方法，比如AJAX等异步代码<br>4、 <code>getters</code> ：先处理state中的数据，然后返回处理之后的结果，有点类似过滤器<br>代码演示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 state</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">// 修改 name</span></span><br><span class="line">    <span class="function"><span class="title">SET_NAME</span>(<span class="params">state, data</span>)</span> &#123;</span><br><span class="line">        state.name = data</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 修改 age</span></span><br><span class="line">    <span class="function"><span class="title">SET_AGE</span>(<span class="params">state, data</span>)</span> &#123;</span><br><span class="line">        state.age = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂业务逻辑的功能</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="function"><span class="title">login</span>(<span class="params">context, data</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 登录代码</span></span><br><span class="line">        <span class="comment">// 注意！！：不能直接修改 state ，只能通过 mutations 中的</span></span><br><span class="line">        <span class="comment">// 方法修改，比如：</span></span><br><span class="line">        <span class="comment">// 调用 SET_NAME 方法，jack 做 为参数</span></span><br><span class="line">        context.commit(<span class="string">&#x27;SET_NAME&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理一个数据然后返回处理之后的结果（类似于过滤器）</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 处理一下年龄</span></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.age + <span class="string">&#x27;岁&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题3、如何在组件中使用-Vuex-中的数据？"><a href="#题3、如何在组件中使用-Vuex-中的数据？" class="headerlink" title="题3、如何在组件中使用 Vuex 中的数据？"></a>题3、如何在组件中使用 Vuex 中的数据？</h2><p>答：组件中使用 Vuex 中的数据有两种方式：</p><p>方式一、直接读取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; $store.state.name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">this</span>.$store.state.name )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">this</span>.$store.state.age )</span><br></pre></td></tr></table></figure><p>方式二、引入并映射到计算属性中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入 mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 2. 在 computed 中进行映射</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 Vuex 中的 name 和 age 映射到当前组件中来</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 映射完之后，就相当于本组件中的数据，可以直接使用</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">this</span>.name )</span><br><span class="line"></span><br><span class="line">​<span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 题4、组件中如何修改 Vuex 中的数据？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">答：调用 `</span>mutations<span class="string">` 或者 `</span>actions<span class="string">` 中的方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">方式一、直接调用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​`</span><span class="string">``</span> JS</span><br><span class="line"><span class="comment">// 调用  mutations 中的 SET_NAME 方法</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;SET_NAME&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 actions 中的 login 方法</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure><p>方式二、引入并映射到 methods 中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入映射函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 2. 映射</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">    ...mapActions([<span class="string">&#x27;login&#x27;</span>]),</span><br><span class="line">    ...mapMutations([<span class="string">&#x27;SET_NAME&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 映射完之后可以像本组件中的方法一样正常使用</span></span><br><span class="line"><span class="built_in">this</span>. SET_NAME(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.login(<span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
            <tag> vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- Vue Axios</title>
      <link href="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-Axios/"/>
      <url>/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-Axios/</url>
      
        <content type="html"><![CDATA[<h2 id="题1、如何配置基地址？为什么要配置？"><a href="#题1、如何配置基地址？为什么要配置？" class="headerlink" title="题1、如何配置基地址？为什么要配置？"></a>题1、如何配置基地址？为什么要配置？</h2><p>答：<br>写法一、 <code>axios.defaults.baseURL = &#39;http://xxxxx&#39;</code><br>写法二、</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://xxxxx&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每次调用接口时都需要写上 <code>完整的接口地址</code> ，但是每个接口前面的地址是相同的，</p><p>所以我们可以把接口地址中前面 <code>相同的部分</code> 提取出来设置一下，这样在后面调用接口时就 <code>不需要写前面的地址</code> 了。</p><p>每个接口地址前面相同的部分就是 <code>基地址</code> 。</p><h2 id="题2、axios-中有几个拦截器？项目中是怎么使用的？"><a href="#题2、axios-中有几个拦截器？项目中是怎么使用的？" class="headerlink" title="题2、axios 中有几个拦截器？项目中是怎么使用的？"></a>题2、axios 中有几个拦截器？项目中是怎么使用的？</h2><p>答：两个拦截器：<br><code>前置（请求）拦截器</code> ：就是一个函数，在 <code>每次调用接口之前</code> 都会触发的函数。<br><code>后置（响应）拦截器</code> ：就是一个函数，每次服务器 <code>返回结果之后</code> 触发的函数。</p><p><code>前置拦截器</code> ：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册时有两个函数，</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次请求成功时执行</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次请求如果失败时执行</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后置拦截器 ：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册时有两个函数，</span></span><br><span class="line">request.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每次请求成功时执行</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每次请求如果失败时执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>基于这 <code>两个函数</code> 的特点：<br>前置拦截器（为每次请求 <code>添加令牌</code> ）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、请求接口时要把令牌放到协议头上提交给接口</span><br><span class="line">2、每次请求接口之前都放令牌比较麻烦</span><br><span class="line">3、所以，可以在前置拦截器中只写一次代码，就可以在每次请求时把令牌放上</span><br></pre></td></tr></table></figure><p>后置拦截器（判断每次请求 <code>是否失败</code> ）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、每次调用完接口之后都要判断是否失败，如果失败就提交错误信息</span><br><span class="line">2、我们可以在后置拦截器中写一次代码，判断如果返回错误就提示错误信息</span><br><span class="line">3、这样之后，以后在项目中就不用再判断接口是否失败了</span><br></pre></td></tr></table></figure><h2 id="题3、如何并发执行多个-AJAX-请求？为什么要并发？"><a href="#题3、如何并发执行多个-AJAX-请求？为什么要并发？" class="headerlink" title="题3、如何并发执行多个 AJAX 请求？为什么要并发？"></a>题3、如何并发执行多个 AJAX 请求？为什么要并发？</h2><p>答：<br>使用 <code>Promise.all</code> 来执行多个异步代码，在 axios 中也可以使用 <code>axios.all</code> 。</p><p>比如：两个接口时第一个执行完之后，再执行第二个，所以如果每个接口需要 <code>2</code> 秒执行完，那么调用下面两个接口一共要花费 <code>4</code> 秒。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">await</span> getUsers()</span><br><span class="line">    <span class="keyword">let</span> articles = <span class="keyword">await</span> getArticles()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这两个接口没有先后的关系，所以我们为了 <code>提高性能</code> 可以并发调用。<br>可以使用 <code>Promise.all</code> 让多个 <code>异步并发执行</code> 。<br>上面的代码改成下面的样子， <code>两个代码同时执行</code> ，最终只需要 <code>2</code> 秒就可以完成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 同时执行两个异步代码</span></span><br><span class="line">    <span class="keyword">const</span> [users, articles] = <span class="built_in">Promise</span>.all(getUsers(), getArticles())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题4、在-Vue-中使用-axios-的流程？"><a href="#题4、在-Vue-中使用-axios-的流程？" class="headerlink" title="题4、在 Vue 中使用 axios 的流程？"></a>题4、在 Vue 中使用 axios 的流程？</h2><p>答：</p><p>1、 <code>安装</code> axios<br>2、在 <code>main.js</code> 中引入 <code>axios</code><br>3、 <code>配置</code> axios （基地址、拦截器）<br>4、把 axios <code>注册到</code> Vue 的原型上（ <code>Vue.prototype.$axios = axios</code> ）<br>5、注册到原型上之后，就可以直接在任何一个组件中使用 <code>this.$axios</code> 来获取 axios 并使用了。</p><p>扩展：如果没注册到原型上，那么在每个组件中如果要使用需要先引入再使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.get(...）</span><br></pre></td></tr></table></figure><h2 id="题5、axios-中如何设置请求-HTTP-协议头信息？"><a href="#题5、axios-中如何设置请求-HTTP-协议头信息？" class="headerlink" title="题5、axios 中如何设置请求 HTTP 协议头信息？"></a>题5、axios 中如何设置请求 HTTP 协议头信息？</h2><p>答：<br>我们向服务器提交数据时有三个地方：<br>1、 <code>URL</code> 上（小的数据，id、页码、搜索关键字等），比如：/users?page=1&amp;id=122<br>2、 <code>body </code>中（POST方式提交的数据），比如：用户名、密码、图片、JSON等。<br>3、 <code>http 协议头</code> 上，比如：token 令牌、CORS（AJAX跨域）、接口限频（案例）、HTTP缓存等。<br>图示位置：<br><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-Axios/01.png" alt="01"><br>在 axios 中的写法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. URL 上提交</span></span><br><span class="line">写法一、 写在 ?</span><br><span class="line">    axios.get(<span class="string">&#x27;/users?id=1&amp;page=1&#x27;</span>)</span><br><span class="line">写法二、</span><br><span class="line">axios.get(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 在 body 中提交（POST、PUT方式）</span></span><br><span class="line">axios.post(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="number">111</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="number">123</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 在协议头上放</span></span><br><span class="line">写法一、 每次发送请求时单独设置</span><br><span class="line">axios.post(<span class="string">&#x27;/users&#x27;</span>, &#123;&#125;, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        Content - Type: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="attr">Authorization</span>: <span class="string">&#x27;Beaer xxxxxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">写法二、 为所有请求设置公共的</span><br><span class="line">axios.defaults.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="扩展：什么是-HTTP-协议？"><a href="#扩展：什么是-HTTP-协议？" class="headerlink" title="扩展：什么是 HTTP 协议？"></a>扩展：什么是 HTTP 协议？</h2><p>答： <code>浏览器</code> 和 <code>服务器</code> 通信时的一种 <code>规定好结构的字符串</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
            <tag> vue </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- vue 路由</title>
      <link href="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue-%E8%B7%AF%E7%94%B1/"/>
      <url>/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue-%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="题1、vue-router-中主要提供了几个组件？分别是干什么用的？"><a href="#题1、vue-router-中主要提供了几个组件？分别是干什么用的？" class="headerlink" title="题1、vue router 中主要提供了几个组件？分别是干什么用的？"></a>题1、vue router 中主要提供了几个组件？分别是干什么用的？</h2><p>答：<br>两个组件。<br><code>router-link</code> ：制作一个路由跳转的按钮，比如：登录<br><code>router-view</code> ：显示注册的路由页面</p><h2 id="题2、keep-alive-是干什么用的？怎么用？"><a href="#题2、keep-alive-是干什么用的？怎么用？" class="headerlink" title="题2、keep-alive 是干什么用的？怎么用？"></a>题2、keep-alive 是干什么用的？怎么用？</h2><p>答：<br>一个路由在切换时会 <code>被销毁</code> ，之前的 <code>数据全部丢失</code> ，下次再访问这个组件时，需要重新创建，重新调接口，重新渲染.<br>我们可以使用 <code>keep-alive</code> 把组件缓存起来，这样在组件 <code>切换</code> 时，这个组件并 <code>没有被销毁</code> ，下次访问时，可以就可以显示出来，而且 <code>原组件中数据</code> 还在。</p><p>把需要缓存的组件使用 <code>keep-alive</code> 套起来即可。比如：把所有 <code>路由页面都缓存起来</code> ，在切换时不销毁：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​``` </span><br><span class="line">还可以使用 include 和 exclude 来设置哪些缓存，哪些不缓存，比如：不缓存登录页：</span><br><span class="line">​``` HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文档地址：<a href="https://cn.vuejs.org/v2/api/#keep-alive">https://cn.vuejs.org/v2/api/#keep-alive</a></p><h2 id="题3、如何实现路由跳转？"><a href="#题3、如何实现路由跳转？" class="headerlink" title="题3、如何实现路由跳转？"></a>题3、如何实现路由跳转？</h2><p>答：<br>方式一、 <code>router-link</code> 制作按钮<br>方式二、 <code>JS 中使用</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;路径&#x27;</span>) <span class="comment">// 跳转到指定路径</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">// 返回上一个页面</span></span><br><span class="line"><span class="built_in">this</span>.$router.go(-<span class="number">1</span>) <span class="comment">// 返回 上一个页面</span></span><br></pre></td></tr></table></figure><h2 id="题4、如何接收路由参数？"><a href="#题4、如何接收路由参数？" class="headerlink" title="题4、如何接收路由参数？"></a>题4、如何接收路由参数？</h2><p>答：路由参数有两种形式：<br>形式一、<br><code>?</code> 后面，比如 <code>/users?id=100&amp;page=1</code><br>JS中使用 <code>this.$route.query.id</code><br>形式二、<br><code>/</code> 后面，比如： <code>users/100/1</code><br>JS 中使用 <code>this.$route.params.id</code></p><h2 id="题5、配置一个路由需要几个属性？"><a href="#题5、配置一个路由需要几个属性？" class="headerlink" title="题5、配置一个路由需要几个属性？"></a>题5、配置一个路由需要几个属性？</h2><p>答：至少2个：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path： 路径</span><br><span class="line">component： 页面组件</span><br><span class="line"><span class="attr">name</span>: 路由名称</span><br><span class="line">children： 子路由页面</span><br><span class="line">meta： 设置其他的信息</span><br></pre></td></tr></table></figure><h2 id="题6、vue-router-中有几个钩子函数（导航守卫）？项目中一般用来干什么用？"><a href="#题6、vue-router-中有几个钩子函数（导航守卫）？项目中一般用来干什么用？" class="headerlink" title="题6、vue router 中有几个钩子函数（导航守卫）？项目中一般用来干什么用？"></a>题6、vue router 中有几个钩子函数（导航守卫）？项目中一般用来干什么用？</h2><p>答：</p><p><code>导航守卫</code> ：一个 <code>回调函数</code> ，这个函数会在每次路由跳转时执行。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeEach： 在每次路由跳转之前执行。</span><br><span class="line">afterEach： 在每次路由跳转完之后执行。</span><br><span class="line">beforeEnter： 写在某一个路由中， 当进入这个路由时触发的。</span><br></pre></td></tr></table></figure><p><code>组件内守卫</code> ：写在组件中的路由，当进入这个组件时才触发。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter： 当前进入前</span><br><span class="line">beforeRouteUpdate(<span class="number">2.2</span> 新增)： 路由更新时</span><br><span class="line">beforeRouteLeave： 离开这个组件时</span><br></pre></td></tr></table></figure><p><code>beforeResolve</code> ：所有组件解析完，跳转前执行。</p><p>基于它的特点， <code>beforeEach</code> 中非常适合 <code>编写权限功能</code> ，比如：必须登录才能进入我的订单页面。可以在每次跳转之前执行 <code>beforeEach</code> 然后在 beforeEach 中判断，如果要进入 <code>订单页面必须要先登录</code> 。</p><p>商城后台项目中使用它来进行权限判断！</p><h2 id="题7、vue-router-中的-beforeEach-钩子函数（导航守卫）中有几个参数？分别是干什么用的？"><a href="#题7、vue-router-中的-beforeEach-钩子函数（导航守卫）中有几个参数？分别是干什么用的？" class="headerlink" title="题7、vue router 中的 beforeEach 钩子函数（导航守卫）中有几个参数？分别是干什么用的？"></a>题7、vue router 中的 beforeEach 钩子函数（导航守卫）中有几个参数？分别是干什么用的？</h2><p>答：三个参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">to： 对象， 将要跳转到的路由对象。</span><br><span class="line"><span class="keyword">from</span>： 对象， 跳转前的路由对象。</span><br><span class="line">next： 函数， 用来跳转的函数， 在钩子函数中必须要调用这个函数， 有三种情况：</span><br><span class="line">next()： 进入下一个页面。</span><br><span class="line">next(<span class="literal">false</span>)： 阻止本次跳转（ 不跳转）。</span><br><span class="line">next(路径）： 跳转到这个指定的路径。</span><br></pre></td></tr></table></figure><p>示例、比如必须登录才能进入 <code>/main</code> 页面，如果 <code>没有登录</code> 就跳转到登录页面。</p><p><code>router/index.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个全局守卫，在每次跳转之前执行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否要去 /main 页面</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;main&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断有没有令牌</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>) === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 跳转到登录页</span></span><br><span class="line">            next(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接跳转过去</span></span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="题8、如何在一个页面中配置子路由页面？"><a href="#题8、如何在一个页面中配置子路由页面？" class="headerlink" title="题8、如何在一个页面中配置子路由页面？"></a>题8、如何在一个页面中配置子路由页面？</h2><p>答：</p><p>第一步：在 <code>router/index.js</code> 中使用 <code>children</code> 属性配置子路由页面</p><p>第二步：在这个页面中添加 <code>router-view</code> 组件显示子页面</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> vue路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- Vue 基础</title>
      <link href="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-Vue-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="题1、data-中定义的数据如何在页面中显示？"><a href="#题1、data-中定义的数据如何在页面中显示？" class="headerlink" title="题1、data 中定义的数据如何在页面中显示？"></a>题1、data 中定义的数据如何在页面中显示？</h2><p>答：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、如果是字符串、数字等，使用插值表达式 &#123;&#123;...&#125;&#125;</span><br><span class="line">2、如果是数组一般使用 v-for </span><br></pre></td></tr></table></figure><h2 id="题2、生命周期函数有哪些？项目中是怎么使用的？"><a href="#题2、生命周期函数有哪些？项目中是怎么使用的？" class="headerlink" title="题2、生命周期函数有哪些？项目中是怎么使用的？"></a>题2、生命周期函数有哪些？项目中是怎么使用的？</h2><p>答：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、创建前后、挂载前后、销毁前后、更新前后、被激活、被隐藏等</span><br><span class="line">2、项目中常用的：</span><br><span class="line"></span><br><span class="line">    created（创建后）：调接口获取页面初始数据。</span><br><span class="line">    mounted（挂载后）：在页面加载完之后执行一个 DOM 操作的 JS 代码，比如：商城后中的图表功能。</span><br></pre></td></tr></table></figure><h2 id="题3、在-Vue-中如何绑定事件？"><a href="#题3、在-Vue-中如何绑定事件？" class="headerlink" title="题3、在 Vue 中如何绑定事件？"></a>题3、在 Vue 中如何绑定事件？</h2><p>答：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v-on 或者 @ 。比如：v-on:click 或者 @click。</span><br></pre></td></tr></table></figure><h2 id="题4、什么是双向绑定？项目中是怎么使用的？"><a href="#题4、什么是双向绑定？项目中是怎么使用的？" class="headerlink" title="题4、什么是双向绑定？项目中是怎么使用的？"></a>题4、什么是双向绑定？项目中是怎么使用的？</h2><p>答：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 v-model 指令进行双向绑定。</span><br><span class="line">项目中：操作表单元素：单选框、复选框、下拉框等时需要定义数据并使用 v-model 进行绑定。</span><br></pre></td></tr></table></figure><h2 id="题5、Vue-组件中的-data-为什么是函数？"><a href="#题5、Vue-组件中的-data-为什么是函数？" class="headerlink" title="题5、Vue 组件中的 data 为什么是函数？"></a>题5、Vue 组件中的 data 为什么是函数？</h2><p>答：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跟按引用传值有关。</span><br><span class="line">如果不用函数，data 是对象类型的数据，对象都是按引用传递的，会导致：当组件使用多次时，它们会共享用同一个 data 数据，</span><br><span class="line">修改任何一个组件中的 data , 其他的组件也会跟着一起改变，这是不对的，</span><br><span class="line">每个组件实例在使用时应该是完全独立 的，互不影响才对。</span><br><span class="line">所以 data 必须是一个函数，每次在函数中返回一个全新的对象，这样就不会出现共享的问题了。</span><br></pre></td></tr></table></figure><h2 id="扩展：什么是按引用传值？"><a href="#扩展：什么是按引用传值？" class="headerlink" title="扩展：什么是按引用传值？"></a>扩展：什么是按引用传值？</h2><p>变量赋值时分为两种情况：</p><p><code>按值传递</code> ：如果是数字、布尔、字符串等基础类型。<br><code>原理</code> ：先把这个值在内存中复制一份，然后赋给另一个变量。<br><code>效果</code> ：赋值之后两个值是两个独立的变量互不影响 。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 按值传递 */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span> <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> b = a    <span class="comment">// 按值传递（因为 a 是数字）</span></span><br><span class="line"><span class="comment">// 现在 a 和 b 是两个独立 互不影响 的变量</span></span><br><span class="line">b=<span class="number">200</span>   <span class="comment">// 修改 b 不影响 a </span></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// a 还是 100</span></span><br></pre></td></tr></table></figure><p><code>按引用传递</code> ：如果值类型是对象或者数组时。<br><code>原理</code> ：把这个变量在内存中的地址赋给另一个变量。<br><code>效果</code> ：赋值之后，两个变量指向同一个内存地址，其实还是同一个变量，只不过有两个变量名。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 按引用传递 */</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> b = a <span class="comment">// 按引用传递（数组和对象都是引用传递）</span></span><br><span class="line"><span class="comment">// a 和 b 指向内存中的同一个地址，a和b是同一个数据</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span> <span class="comment">// 把 b 修改</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]) <span class="comment">// 100 也变成100，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以如果希望复制出一个全新的数组，需要使用 “克隆技术”</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    浅克隆：只克隆最外层的数据。（只克隆一部分）</span></span><br><span class="line"><span class="comment">            方法：let b = [...a]    ， 把 a 克隆一份给 b （浅克隆）</span></span><br><span class="line"><span class="comment">    深克隆：把内层的也复制一份。（完全的克隆）</span></span><br><span class="line"><span class="comment">            方法：let b = JSON.parse(   JSON.stringify(a)  )</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="题6、如何定义计算属性？项目中是怎么使用的？"><a href="#题6、如何定义计算属性？项目中是怎么使用的？" class="headerlink" title="题6、如何定义计算属性？项目中是怎么使用的？"></a>题6、如何定义计算属性？项目中是怎么使用的？</h2><p>答：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 computed 来定义计算属性。制作购物车时里面的商品总价。</span><br></pre></td></tr></table></figure><h2 id="题7、什么是监听器？监听什么的？项目中是怎么使用的？"><a href="#题7、什么是监听器？监听什么的？项目中是怎么使用的？" class="headerlink" title="题7、什么是监听器？监听什么的？项目中是怎么使用的？"></a>题7、什么是监听器？监听什么的？项目中是怎么使用的？</h2><p>答：</p><p>使用 <code>watch</code> 来定义监听器，一个监听器就是一个函数，函数名就是要监听的 <code>data</code> 中的一个变量的名字，一旦监听的变量发生变量，这个函数就被调用了。</p><p>监听器分为 <code>浅监听</code> 和 <code>深度监听</code> ，当监听的数据是一个复杂的数据类型（数组、对象）时需要使用 <code>深度监听</code> 。</p><p>在项目中实现数据 <code>搜索</code> 、 <code>排序</code> 、 <code>翻页</code> 时使用过，每当用户点击 <code>翻页</code> 、 <code>排序</code> 、 <code>搜索条件</code> 的按钮时就要重新调用接口，所以我定义了一个 <code>变量</code> ，保存翻页、排序、搜索的信息，然后使用监听器监听这个变量，一量发生变化就重新调用接口获取数据</p><p>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 保存翻页、搜索关键字、排序信息</span></span><br><span class="line">            <span class="attr">info</span>: &#123;</span><br><span class="line">                <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">keywords</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">sortby</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">                <span class="attr">sortway</span>: <span class="string">&#x27;desc&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听器</span></span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="comment">// 当条件改变时重新调用接口</span></span><br><span class="line">        <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度监听</span></span><br><span class="line">            <span class="attr">handle</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 重新调用接口获取数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？"><a href="#题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？" class="headerlink" title="题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？"></a>题8、什么是过滤器？项目中是怎么使用的？如何使用过滤器？</h2><p>答：</p><p>使用 <code>filter</code> 定义过滤器。</p><p>过滤器分为 <code>全局过滤器</code> 和 <code>局部过滤器</code> 。</p><p><code>全局过滤器</code> ：在任何一个组件中可以直接使用。<br><code>局部过滤器</code> ：在组件中需要先引入，再注册到组件的 <code>filter</code> 中，然后才能使用。</p><p>当一个绝对时间（发表文章时间）在显示时转化成一个相对时间，项目中的实现思路：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、先定义了一个叫做 relativeTime 的全局变量器</span><br><span class="line">2、在组件中使用： &#123;&#123; time | relativeTime &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="题9、什么是混入？项目中是怎么使用的？"><a href="#题9、什么是混入？项目中是怎么使用的？" class="headerlink" title="题9、什么是混入？项目中是怎么使用的？"></a>题9、什么是混入？项目中是怎么使用的？</h2><p>答：</p><p><code>mixins</code> 是 <code>定义混入</code> 。可以把一段 JS 代码合并到一个 Vue 组件中。<br><code>用途</code> ：可以把多个组件共用的 <code>JS 代码单独提取出来</code> 放到一个 JS 文件中，然后哪个组件中需要就直接混入。</p><p>之前写的商城后台的项目：使用了混入实现的把组件中的 <code>JS 代码</code> 和 <code>HTML+CSS</code> 分离写在两个文件中。</p><p><code>实现思路</code> ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、把 JS 代码单独写到一个 JS 文件中</span><br><span class="line">2、在 .vue 文件中使用 mixins: [ js 文件] 混入进来</span><br></pre></td></tr></table></figure><h2 id="题10、如何将-data-中定义的图片路径绑定到-src-属性上？"><a href="#题10、如何将-data-中定义的图片路径绑定到-src-属性上？" class="headerlink" title="题10、如何将 data 中定义的图片路径绑定到 src 属性上？"></a>题10、如何将 data 中定义的图片路径绑定到 src 属性上？</h2><p>答：</p><p>使用 <code>v-bind</code> 或者 <code>:</code><br>比如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; img: src=&quot;image&quot; /&gt;</span><br><span class="line">&lt; img v - bind: src=&quot;image&quot; /&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">image: &#x27;http://www.ww.ww/1.jpg&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题11、在-Vue-中使用一个自定义组件的流程是？"><a href="#题11、在-Vue-中使用一个自定义组件的流程是？" class="headerlink" title="题11、在 Vue 中使用一个自定义组件的流程是？"></a>题11、在 Vue 中使用一个自定义组件的流程是？</h2><p>答：<br>自定义组件有两种情况：</p><p><code>全局组件</code> ：直接在页面中使用 ，比如：<br><code>局部组件</code> ：先引入、再组件，然后才能使用。</p><p>创建一个自定义组件，比如：Hello.vue 组件</p><p>1、使用 import 引入这个 <code>自定义组件</code> ，比如： <code>import Hello from &#39;Hello.vue&#39;</code><br>2、注册这个组件，在 Vue 的 <code>components: &#123; Hello &#125;</code><br>3、使用</p><h2 id="题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？"><a href="#题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？" class="headerlink" title="题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？"></a>题12、组件之间如何传值？父向子传值时，如何设置属性的默认值和属性的类型？</h2><p>答：</p><p><code>父&gt;子</code> 使用属性 ，注意，需要在子组件中使用 <code>props</code> 来接收属性。<br><code>子&gt;父</code> 使用 事件，注意：在子组件中使用 <code>this.$emit(事件名，数据）</code> 触发父组件中的事件<br><code>兄弟之间</code> 使用 <code>Bus 总线</code> 的中间组件实现。</p><p><strong>父向子传值时，如何设置属性的默认值和属性的类型？</strong><br>在子组件中使用 <code>props</code> 接收属性：</p><p>写法一、 <code>不设置类型和默认值</code><br>props: [ ‘name’, ‘age’ ] // 接收 name 和 age ，不限制类型</p><p>写法二、 <code>限制类型和默认值</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题13、style-上的-scoped-是什么意思？使用原理是什么？"><a href="#题13、style-上的-scoped-是什么意思？使用原理是什么？" class="headerlink" title="题13、style 上的 scoped 是什么意思？使用原理是什么？"></a>题13、style 上的 scoped 是什么意思？使用原理是什么？</h2><p>答：<br><code>里面的样式</code> 只对当前这个 <code>组件生效</code> ， <code>不会影响</code> 其他组件。</p><p>当添加了 <code>scoped</code> 之后，vue 会在这个组件中所有的标签上都添加一个 <code>唯一的标识符</code> ，</p><p>只有这个组件中的标签上才有这个 <code>标签符</code> ，然后在 CSS 上会通过这个属性来 <code>限制 CSS </code>的应用范围。</p><p>1、组件中 <code>添加属性</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-26084dc2</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-26084dc2</span> <span class="attr">class</span>=<span class="string">&quot;login-btnBox&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">data-v-26084dc2</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、css 上通过属性来 <code>限制范围</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 通过属性选择器就只对当前这个组件中的 .count 生效 */</span></span><br><span class="line"><span class="selector-class">.count</span> <span class="selector-attr">[ data-v-26084dc2]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题14、什么是插槽？干什么用的？"><a href="#题14、什么是插槽？干什么用的？" class="headerlink" title="题14、什么是插槽？干什么用的？"></a>题14、什么是插槽？干什么用的？</h2><p>答：</p><p>组件中会在 <code>特定的位置</code> 上留插槽，我们可以在使用这个组件时向这个插槽中 <code>添加HTML的结构</code> ，目的是可以自己 <code>扩展一个组件的功能</code> 。</p><p>比如：项目中使用的 <code>vant</code> 的导航栏组件，但是它 <code>默认的图标</code> 不满足要求，所以我们可以使用它的 <code>插槽</code> ，自己来 <code>定义图标</code> 这个区域的内容。</p><p>插槽分为两种：<br><code>匿名插槽（默认插槽）</code> : 一个组件中只能有一个 <code>匿名插槽</code> , 如果在组件中间 <code>不使用 slot</code> 默认放到匿名插槽的位置。</p><p><code>有名插槽</code> ：一个组件中可以有 <code>多个有名的插槽</code> , 向有名插槽中放数据时需要 <code>使用 slot</code> 属性指定插槽的名字</p><h2 id="题15、v-if-和-v-show-的区别？"><a href="#题15、v-if-和-v-show-的区别？" class="headerlink" title="题15、v-if 和 v-show 的区别？"></a>题15、v-if 和 v-show 的区别？</h2><p>答：</p><p><code>共同</code> ：v-if 和 v-show 都是控制一个元素是否显示。<br><code>区别</code> ：v-if 如果是 false 就不渲染这个元素，页面中没有这个元素<br><code>v-show</code> 无论 true 和 false 都会渲染这个元素，页面中始终有这个元素，当 false 时使用 display: none 把它隐藏。</p><h2 id="题16、v-html-的用途是？"><a href="#题16、v-html-的用途是？" class="headerlink" title="题16、v-html 的用途是？"></a>题16、v-html 的用途是？</h2><p>答：<br>把一个 HTML 字符串 <code>解析</code> 成 HTML 显示出来。<br>比如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; str &#125;&#125; ------------&gt;</span><br><span class="line"><span class="comment">&lt;!-- 当成普通字符串显示出来：  &lt;h1&gt;hello&lt;/h1&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ----------&gt;</span><br><span class="line"><span class="comment">&lt;!-- 解析 h1 标签，显示出来是一个加粗放大的 hello --&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">str: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题17、template-组件的用途是？"><a href="#题17、template-组件的用途是？" class="headerlink" title="题17、template 组件的用途是？"></a>题17、template 组件的用途是？</h2><p>答：<br>这个标签在页面中 <code>不会渲染</code> 出任何元素，它的用途是把 <code>多个标签套起来</code> 当成一个 <code>整体</code> 。</p><p>比如有三个 div 标签要循环</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>必须要使用一元素套起来</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;v in 10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样最外层多了一个 div，如果不想要外层 div 可以使用 tempalte</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;v in 10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题 -- JavaScript</title>
      <link href="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/"/>
      <url>/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="题1、-ES6的新特性"><a href="#题1、-ES6的新特性" class="headerlink" title="题1、 ES6的新特性"></a>题1、 ES6的新特性</h2><p>1、 <code>变量常量</code> ：let 、const<br>2、 <code>异步</code> ：promise 、 async… await<br>3、 <code>面向对象</code> ：class<br>4、 <code>数据类型</code> ：map、set、Symbol<br>5、 <code>函数</code> ：箭头函数<br>6、 <code>其他</code> ：展开运算符 ： …<br>7、 <code>对象解析运算符</code> ：{}:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> boy = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name</span><br><span class="line">&#125; = boy</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// tom</span></span><br></pre></td></tr></table></figure><p>8、 <code>数组加强</code> ：includes 等等<br>9、 <code>字符串加强</code> ：startWith 等等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9.1 proxy（代理）</span><br><span class="line">9.2 Reflect</span><br><span class="line">9.3 模块化</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.js</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    name</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;a.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure><h2 id="题2、JS中如何判断当前使用的是什么浏览器？"><a href="#题2、JS中如何判断当前使用的是什么浏览器？" class="headerlink" title="题2、JS中如何判断当前使用的是什么浏览器？"></a>题2、JS中如何判断当前使用的是什么浏览器？</h2><p>使用 js 的内置对象 <code>navigator</code> 中的 <code>userAgent</code> 属性来判断，不同的浏览器打印出来的 <code>字符串值不同</code> ，我们只需要从字符串中来匹配：</p><p>示例代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBrowser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">    <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">&quot;Opera&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否Opera浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">&quot;compatible&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp;</span><br><span class="line">        userAgent.indexOf(<span class="string">&quot;MSIE&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; !isOpera; <span class="comment">//判断是否IE浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">&quot;Edge&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否IE的Edge浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isFF = userAgent.indexOf(<span class="string">&quot;Firefox&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否Firefox浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isSafari = userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp;</span><br><span class="line">        userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>) == -<span class="number">1</span>; <span class="comment">//判断是否Safari浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isChrome = userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp;</span><br><span class="line">        userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断Chrome浏览器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;MSIE (\\d+\\.\\d+);&quot;</span>);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">&quot;$1&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE7&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE8&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE9&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE10&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">11</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IE11&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125; <span class="comment">//IE版本过低</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isOpera) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Opera&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEdge) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Edge&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFF) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FF&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSafari) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Safari&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isChrome) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chrome&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题3、什么是-JSON？"><a href="#题3、什么是-JSON？" class="headerlink" title="题3、什么是 JSON？"></a>题3、什么是 JSON？</h2><p>JSON 是一种 <code>数据结构</code> ，在客户端与服务器端进行数据通信时使用。除了 JSON 之外还有一种数据结构在传输数据时很常用，叫做 <code>XML</code> 。但是相比之下，JSON这种结构与XML更加的 <code>简洁</code> 、 <code>数据量小</code> 、 <code>高效</code> ，所以我们大部分时候在 <code>传输数据</code> 时都是使用 的 <code>JSON</code> 这种格式。</p><h2 id="题4、图片懒加载"><a href="#题4、图片懒加载" class="headerlink" title="题4、图片懒加载"></a>题4、图片懒加载</h2><p>懒加载：用到的时候再加载。通常用来 <code>优化比较长的页面</code> 。比如：京东商城中，默认只显示第一屏的图片，后面几屏的图片只有在滚动下去的时候才加载显示。</p><p><code>图片懒加载</code> 的实现原理：为了不让浏览器直接加载图片，我们可以先把图片的真实路径放到图片的一个 <code>自定义的属性</code> 上（不要放到 src 属性上），然后通过 <code>JS</code> 来判断 <code>滚动的位置</code> ，当发现图片标签滚动到浏览上时，才把图片路径移动到 src 属性上。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;http:/www.bad.com/1.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>参考地址：<a href="https://www.jianshu.com/p/dcf73ad5ebed">https://www.jianshu.com/p/dcf73ad5ebed</a></p><h2 id="题5、JS获取元素的几种方法"><a href="#题5、JS获取元素的几种方法" class="headerlink" title="题5、JS获取元素的几种方法"></a>题5、JS获取元素的几种方法</h2><p><code>document.getElementById</code><br><code>document.getELementsByTagName</code><br><code>document.getELementsByName</code><br><code>document.querySelector</code><br><code>document.querySelecorAll</code><br>等等</p><h2 id="题6、如何在控制台中查看原型链"><a href="#题6、如何在控制台中查看原型链" class="headerlink" title="题6、如何在控制台中查看原型链"></a>题6、如何在控制台中查看原型链</h2><p>使用 console.log 打印对象，然后在控制台中每个对象有个 <code>__proto__</code> 属性可以查看原型</p><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/03.png" alt="03"><h2 id="题7、-谈谈对this的理解？-call和apply-的区别是什么，那个性能更好一些？"><a href="#题7、-谈谈对this的理解？-call和apply-的区别是什么，那个性能更好一些？" class="headerlink" title="题7、 谈谈对this的理解？ call和apply 的区别是什么，那个性能更好一些？"></a>题7、 谈谈对this的理解？ call和apply 的区别是什么，那个性能更好一些？</h2><p><strong><code>对 this 的理解</code></strong><br>在 <code>普通函数中</code> ：（this 和 <code>定义函数</code> 的位置有关）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、全局普通函数：this 指向 window 对象</span><br><span class="line">2、对象中的一个普通函数：this 指向这个对象</span><br><span class="line">3、通过 call 和 apply 两个函数可以修改 this 指向某一个对象</span><br></pre></td></tr></table></figure><p>在 <code>箭头函数</code> ：（this 和 <code>调用函数</code> 的位置有关）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、函数在哪里调用 this 就是哪里的 this</span><br><span class="line">2、使用 call 和 apply 不有修改箭头函数中的 this</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面中所有的全局变量和全局函数都属于 window 对象的一个属性</span></span><br><span class="line">    <span class="comment">/* this 、箭头函数、call和apply 结合题 */</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span>;   <span class="comment">// 相当于 window.age = 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通函数中的 this 指向 window 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)   <span class="comment">// 相当于 window.age</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> boy = &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="comment">// 函数在对象中的函数，this 指向这个对象</span></span><br><span class="line">        <span class="attr">hello1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 箭头函数中的 this 是调用这个函数时的 this</span></span><br><span class="line">        <span class="attr">hello2</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello()       <span class="comment">//  10</span></span><br><span class="line"></span><br><span class="line">    boy.hello1()  <span class="comment">//      20  相当于 boy.age</span></span><br><span class="line">    boy.hello2()    <span class="comment">//   10 相当于 this.age</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// call 改变 hello 函数中的 this 指向 boy 对象</span></span><br><span class="line">    hello.call(boy)    <span class="comment">//  20</span></span><br><span class="line">    <span class="comment">// apply 和 call 一样可以改变 this 的指向</span></span><br><span class="line">    hello.apply(boy)   <span class="comment">//  20</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">**`</span>call 和 apply 的区别<span class="string">`**</span></span><br><span class="line"><span class="string">共同点：修改 this 的指向。比如：下面的代码修改 hello 函数中的 this 指向 boy 对象：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JS</span><br><span class="line">hello.call(boy)</span><br><span class="line">hello.apply(boy)</span><br></pre></td></tr></table></figure><p>区别： <code>后续参数不同</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">x, y</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 hello 函数，并让函数中的 this 指向 boy 对象</span></span><br><span class="line">hello.call(boy, <span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 多个参数用，隔开</span></span><br><span class="line">hello.apply(boy, [<span class="number">10</span>, <span class="number">20</span>]) <span class="comment">// 多个参数用数组</span></span><br></pre></td></tr></table></figure><p>哪一个性能更好一些：网络上有人做过测试，结果是 call 的性能更好一些!</p><p>参考：<a href="https://blog.csdn.net/zhengyinhui100/article/details/7837127/">https://blog.csdn.net/zhengyinhui100/article/details/7837127/</a></p><h2 id="题8、-javaScript的内置对象相关内容"><a href="#题8、-javaScript的内置对象相关内容" class="headerlink" title="题8、 javaScript的内置对象相关内容"></a>题8、 javaScript的内置对象相关内容</h2><p><code>Math</code> ：数据操作相关，随机数、Math.random() 等</p><p><code>Date</code> ：时间操作相关，比如获取当前时间戳：Date.now()（单位：毫秒）</p><p><code>Dom</code> 操作相关：</p><p> <code>Document</code> ：文档操作</p><p><code>Navigator</code> ：浏览器相关</p><p> <code>Location</code> ：URL相关，比如：跳转页面 Location.href=”xxx”</p><p><code>Object</code> ：对象的操作，比如，合并两个对象：Object.assign</p><p><code>String</code> ：字符串操作</p><p><code>Array</code> ：数据操作</p><p><code>Number</code> ：数据操作</p><p>等等</p><h2 id="题9、-DOM操作——怎么添加、移动、复制、创建和查找节点？"><a href="#题9、-DOM操作——怎么添加、移动、复制、创建和查找节点？" class="headerlink" title="题9、 DOM操作——怎么添加、移动、复制、创建和查找节点？"></a>题9、 DOM操作——怎么添加、移动、复制、创建和查找节点？</h2><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/04.png" alt="04"><h2 id="题10、基础类型有什么？"><a href="#题10、基础类型有什么？" class="headerlink" title="题10、基础类型有什么？"></a>题10、基础类型有什么？</h2><p>JS 中的 8 种数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">number` ：数字</span><br><span class="line">`string` ：字符串</span><br><span class="line">`boolean` ：布尔</span><br><span class="line">`array` ：数据</span><br><span class="line">`object` ：对象</span><br><span class="line">`null`</span><br><span class="line">`undefiend`</span><br><span class="line">`symbol</span><br></pre></td></tr></table></figure><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/05.png" alt="05"><h2 id="题11、JS-引用类型有什么？"><a href="#题11、JS-引用类型有什么？" class="headerlink" title="题11、JS 引用类型有什么？"></a>题11、JS 引用类型有什么？</h2><p>JS 中所有的对象类型的数据都是 <code>引用</code> 类型。</p><h2 id="题12、什么是-Promise？"><a href="#题12、什么是-Promise？" class="headerlink" title="题12、什么是 Promise？"></a>题12、什么是 Promise？</h2><p>是 ES6 中新出的语法，它主要用来解决 <code>回调地狱</code> 的问题。</p><p>对于异步的代码，传统的实现方法都是使用 <code>回调函数</code> 来实现，但是回调函数 <code>嵌套太多层</code> 时会出现 <code>回调地狱</code> ， 导致代码 <code>不容易维护</code> ，为了解决这个问题，我们可以把异步的代码封装成一个 <code>promise</code> 对象，然后就可以使用 <code>.then</code> 方法来避免 <code>回调地狱</code> 了。</p><h2 id="题13、0-1-0-2的结果？（JS中的小数运算）"><a href="#题13、0-1-0-2的结果？（JS中的小数运算）" class="headerlink" title="题13、0.1+0.2的结果？（JS中的小数运算）"></a>题13、0.1+0.2的结果？（JS中的小数运算）</h2><p>在JS 中小数的运算不精确，所以结果不一定是 <code>0.3</code> 。<br><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/06.png" alt="06"></p><p>为了让它精确需要使用 <code>toFixed</code> 函数：</p><p>参数：精确到几位小数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="题14、-数组、对象、集合的条件筛选"><a href="#题14、-数组、对象、集合的条件筛选" class="headerlink" title="题14、 数组、对象、集合的条件筛选"></a>题14、 数组、对象、集合的条件筛选</h2><p>使用 数据中的 <code>filter</code> 方法，比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> goods = [</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;huawei&#x27;</span>,</span><br><span class="line"><span class="attr">price</span>: <span class="number">3000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;xiaomi&#x27;</span>,</span><br><span class="line"><span class="attr">price</span>: <span class="number">1289</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询出价格大于1500元的商品（筛选）</span></span><br><span class="line">goods.filter(<span class="function"><span class="params">v</span>=&gt;</span>v.price&gt;<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 题15、 作用域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![](https://gitee.com/meishijian/pic_imgage/raw/master/面试题/08.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">JS 中有三种作用域：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>全局作用域<span class="string">` ：定义在函数、类、对象等任何元素之外的变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     在整个脚本所有的地方都可以直接使用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     一直存在直到关闭浏览器并且手动删除</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>局部作用域<span class="string">` ：定义在函数内部的变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     只能在函数内部使用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     只在函数调用的过程中存在，当函数执行完之后，变量就销毁了~</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>块级作用域<span class="string">` （ES6）：使用 let 和 const 定义的变量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> `</span> 块级<span class="string">` ：只在当前 `</span>&#123;&#125;<span class="string">` （代码块） 中有效。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JS</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">10</span> <span class="comment">// 块级作用域，只在当前&#123;&#125;中执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(age) <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age1 = <span class="number">20</span> <span class="comment">// 全局</span></span><br><span class="line">    <span class="built_in">console</span>.log(age1) <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// 报错，未定义~</span></span><br><span class="line"><span class="built_in">console</span>.log(age1) <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="题16、基础类和引用类型有什么区别？"><a href="#题16、基础类和引用类型有什么区别？" class="headerlink" title="题16、基础类和引用类型有什么区别？"></a>题16、基础类和引用类型有什么区别？</h2><p><code>引用类型</code> ：对象（包括数组）。</p><p>在传值时的区别：</p><p> <code>基础类型</code> ：先数据复制一份，把新复制出来的数据传过去。（多份数据）</p><p> <code>引用类型</code> ：把当前数据在内存中的地址传过去。（一份数据）</p><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/07.png" alt="07"><h2 id="题17、以下代码的输出结果并说明"><a href="#题17、以下代码的输出结果并说明" class="headerlink" title="题17、以下代码的输出结果并说明"></a>题17、以下代码的输出结果并说明</h2><p>说明代码的输出结果，并做简单说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果： <code>333</code> 。</p><p>原理： <code>setTimeout</code> 是异步的，所以外层并不会 <code>等1秒</code> ，所以外层循环 <code>一瞬间</code> 就执行了，然后1秒之后再打印时，i的值已经加到3了，所以会打印出3个3。</p><p>如果想打印 <code>012</code> ，可以将 <code>var</code> 改成 <code>let</code> ：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时打印结果是 <code>012</code> 。</p><p>还可以用这种方式实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时打印的也是 <code>012</code> 。</p><h2 id="题18、JS的事件冒泡-和捕获"><a href="#题18、JS的事件冒泡-和捕获" class="headerlink" title="题18、JS的事件冒泡 和捕获"></a>题18、JS的事件冒泡 和捕获</h2><p>JS 中有两种版本（级别）的事件机制，分别是 <code>DOM0级事件机制</code> 和 <code>DOM2级事件机制</code> 。</p><p><code>DOM0</code> ：JS 最早的事件机制</p><p><code>DOM1</code> ：没有为事件添加新功能</p><p><code>DOM2</code> ：在DOM2中添加了新的事件机制</p><p>回答：JS有 <code>DOM0</code> 和 <code>DOM2</code> 两个级别，DOM2支持 <code>捕获</code> 和 <code>冒泡</code> 两个阶段，DOM2中使用 <code>addEventListener</code> 绑定事件，默认事件是在冒泡阶段执行，如果设置 <code>第3个参数</code> 为 <code>true</code> 那么事件会在捕获阶段执行。DOM0级事件只支持 <code>冒泡阶段触发</code> ，DOM0级绑定事件时使用 <code>onxxx</code> .</p><h3 id="DOM0"><a href="#DOM0" class="headerlink" title="DOM0"></a>DOM0</h3><ol><li>绑定事件时使用 <code>onxxx</code></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>同一个事件只能绑定一次，否则就会覆盖</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后面这个 onclick 会覆盖前一个 onclick</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有冒泡阶段</p><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/09.png" alt="09"><h3 id="DOM2"><a href="#DOM2" class="headerlink" title="DOM2"></a>DOM2</h3><p><strong>增强了事件功能。</strong></p><ol><li>使用 addEventListener 绑定事件，使用 removeEventListener 删除事件</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>同一个事件可以绑定多次</li></ol><p><strong>多个事件在触发按顺序触发</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第2个执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第3个执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>事件在触发可以在 捕获 和 冒泡两个阶段，默认是在冒泡阶段触发，可以通过第3个参数设置成捕获阶段触发</li></ol><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/10.png" alt="10"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">true</span>) <span class="comment">// 捕获</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;) <span class="comment">// 冒泡</span></span><br></pre></td></tr></table></figure><p>代码演示，捕获和冒泡 的区别：</p><p>冒泡时打印结果： <code>2 1</code> （先执行里面的按钮，再向上冒泡执行外面的div的事件）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 冒泡阶段执行</span></span></span><br><span class="line"><span class="javascript">        div.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>捕获阶段执行时：打印 <code>1 2</code> （先执行外面的 div 事件，然后再传到里面的 btn 的 click 事件）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 捕获阶段执行</span></span></span><br><span class="line"><span class="javascript">    div.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="题19、-事件代理"><a href="#题19、-事件代理" class="headerlink" title="题19、 事件代理"></a>题19、 事件代理</h2><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/11.png" alt="11"><p>JS 事件代理也叫 <code>事件委托</code> 。当我们要为多个元素 <code>绑定相同的事件</code> 时，如果每个元素都绑定一次会比较麻烦，这时我们可以利用 <code>冒泡机制</code> 的特点（向上传递事件），把这个事件绑定到它们的 <code>父元素</code> 上，这时 <code>只需要绑定一次</code> 事件即可。由父元素 <code>代理</code> 子元素的事件。</p><p>代码说明：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>rjeffefadasjfopew<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 实现功能：点击li时让它的颜色变成红色。</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 下面代码的缺点：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 绑定20次 click 事件，性能不好</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 如果需要再添加新的 li ，那么就还需要再为新的 li 也绑定 click 事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 先选中出有的 li</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    let lis = document.getElementsByTagName(&#x27;li&#x27;)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    // 循环所有的LI绑定点击事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    for(let i=0;i&lt;lis.length;i++) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//        lis[i].onclick = function()&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//            this.style.color = &#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//        &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更好的做法：事件代理</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 好处：1. 只绑定一次事件，性能 更好</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//      2. 再添加更多的子元素时，无须再为子元素绑定事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 由于事件冒泡，所以点击 li 时，这个事件也会被上传给 ul</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 所以可以直接绑定给父元素，由父元素代理这个点击事件</span></span></span><br><span class="line"><span class="javascript">        ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 先获取事件源（不同的浏览器获取方式不同）</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        IE:e.srcElement</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//        其他浏览器： e.target</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (e.target) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.target.nodeName == <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    e.target.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.srcElement.nodeName == <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    e.srcElement.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="题20、数组的splice方法是用来干什么的？每个参数有什么作用？"><a href="#题20、数组的splice方法是用来干什么的？每个参数有什么作用？" class="headerlink" title="题20、数组的splice方法是用来干什么的？每个参数有什么作用？"></a>题20、数组的splice方法是用来干什么的？每个参数有什么作用？</h2><p>从数组中截取一部分数据。</p><p>参数一、 <code>开始截取的下标</code><br>参数二、 <code>要截取出几个</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = a.splice(<span class="number">1</span>, <span class="number">3</span>) <span class="comment">// b= [2,3,4]   a=[1,5]</span></span><br></pre></td></tr></table></figure><h2 id="题21、map-函数是干什么用的"><a href="#题21、map-函数是干什么用的" class="headerlink" title="题21、map 函数是干什么用的"></a>题21、map 函数是干什么用的</h2><p><code>map</code> ：循环一个数组中的每一个 <code>元素</code> ，然后可以对每个 <code>元素进行处理</code> ，然后用 <code>处理完</code> 之后的数组 <code>组成一个新数组</code> 。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a 保存了所有的圆的半径</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment">// 请求计算每个圆的面积，然后把结果保存到另一个数组中</span></span><br><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理每一条记录的代码</span></span><br><span class="line">    <span class="keyword">return</span> v * v * <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 简写成箭头函数：</span></span><br><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="params">v</span> =&gt;</span> v * v * <span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><h2 id="题22、原生JS哪些方法可以对数组去重"><a href="#题22、原生JS哪些方法可以对数组去重" class="headerlink" title="题22、原生JS哪些方法可以对数组去重"></a>题22、原生JS哪些方法可以对数组去重</h2><p><code>indexOf</code> 、 <code>sort</code> 、 <code>splice</code> 、 <code>includes</code> 、 <code>filter</code> 等等都可以实现</p><p>思路：使用 ES6 中的 <code>Set</code> 数据结构。</p><p>ES6 中新出一个数据结构 <code>Set（集合）</code> ，</p><p><code>特点</code> ：用来保存多个值，但不能重复。</p><p>实现思路：先把数组转成 <code>Set（去重）</code> ，再转回数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(a))</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> b = [...new <span class="built_in">Set</span>[a]]</span><br></pre></td></tr></table></figure><h2 id="题23、JS-中如何监听-DOM-元素的改变？"><a href="#题23、JS-中如何监听-DOM-元素的改变？" class="headerlink" title="题23、JS 中如何监听 DOM 元素的改变？"></a>题23、JS 中如何监听 DOM 元素的改变？</h2><p>JS 中可以使用 <code>MutationObserver</code> 接口来实现 <code>DOM 元素的监听</code> 。</p><p>缺点：必须 <code>IE11</code> 以上才能使用！</p><img src="/2020/08/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-JavaScript/11.png" alt="11"><p>示例代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 回调函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onChange</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;dom 元素被改变了~~&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建监听对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> ob = <span class="keyword">new</span> MutationObserver(onChange)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 启动监听器</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数一、要监听的 HTML 节点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数二、配置项</span></span></span><br><span class="line"><span class="javascript">        ob.observe(app, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">attributes</span>: <span class="literal">true</span>, <span class="comment">// 是否属性监听属性值的改变</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">subtree</span>: <span class="literal">true</span>, <span class="comment">// 是否监听子节点的改变</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">childList</span>: <span class="literal">true</span> <span class="comment">// 是否监听添加、删除子节点事件</span></span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron</title>
      <link href="/2020/08/24/Electron/"/>
      <url>/2020/08/24/Electron/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置electron-渲染进程使用主进程方法"><a href="#1-配置electron-渲染进程使用主进程方法" class="headerlink" title="1.配置electron 渲染进程使用主进程方法"></a>1.配置electron 渲染进程使用主进程方法</h1><h4 id="渲染进程使用主进程的方法"><a href="#渲染进程使用主进程的方法" class="headerlink" title="渲染进程使用主进程的方法"></a>渲染进程使用主进程的方法</h4><p>1.确保主进程background.js里面的创建的BrowserWindow  设置了 webPreferences 中的 nodeIntegration 为 true   ps：nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</p><p><img src="/2020/08/24/Electron/pasted-4.png" alt="pasted-4"></p><p><img src="/2020/08/24/Electron/pasted-5.png" alt="pasted-5"></p><p>此外还得在vue的配置文件中也得开启是否Node集成 nodeIntegration: true,</p><p><img src="/2020/08/24/Electron/pasted-6.png" alt="pasted-6"></p><p>如果再次打开electron是跟上图情况一样  就说明你的electron的版本在12以上</p><p>官方将 electron v12.0.0 的 contextIsolation 的默认值改了。所以今后要在渲染进程里调用 require 的话，还需要加上 <code>contextIsolation: false</code> 。</p><p><img src="/2020/08/24/Electron/pasted-7.png" alt="pasted-7"></p><p>这样就可以在渲染进程里面拿去主进程的东西了</p>]]></content>
      
      
      <categories>
          
          <category> Electron-vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron-vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门</title>
      <link href="/2020/08/23/Vue%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/23/Vue%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
